use super::*;
use crate::path::BitPath;
use crate::repo::BitRepo;
use crate::test_utils::*;
use quickcheck::{Arbitrary, Gen};
use quickcheck_macros::quickcheck;

impl Arbitrary for FileMode {
    fn arbitrary(_g: &mut Gen) -> Self {
        Self(0100644)
    }
}

impl Arbitrary for TreeEntry {
    fn arbitrary(g: &mut Gen) -> Self {
        Self {
            path: BitPath::intern(&generate_sane_string_with_newlines(1..300)),
            mode: Arbitrary::arbitrary(g),
            oid: Arbitrary::arbitrary(g),
        }
    }
}

impl Arbitrary for Tree {
    fn arbitrary(g: &mut Gen) -> Self {
        Self::new(Arbitrary::arbitrary(g))
    }
}

#[quickcheck]
fn serialize_then_parse_tree(tree: Tree) -> BitResult<()> {
    let mut bytes = vec![];
    tree.serialize(&mut bytes)?;
    let parsed = Tree::deserialize_sized_unbuffered(bytes.as_slice(), bytes.len() as u64)?;
    assert_eq!(tree, parsed);
    Ok(())
}

#[test]
fn parse_then_serialize_tree() -> BitResult<()> {
    // this tree was generated by git
    let bytes = include_bytes!("../../tests/files/testtree.tree") as &[u8];
    let tree = Tree::deserialize_sized_unbuffered(bytes, bytes.len() as u64)?;
    let mut serialized = vec![];
    tree.serialize(&mut serialized)?;
    assert_eq!(bytes, serialized);
    Ok(())
}
